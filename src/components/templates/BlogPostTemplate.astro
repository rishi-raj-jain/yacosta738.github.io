---
import i18next, { t } from 'i18next'
import BlogTemplate from 'templates:BlogTemplate'
import PostHeader from 'molecules:PostHeader'
import { localizePath } from 'astro-i18next'
import { Icon } from 'astro-icon'
import '../../styles/github-markdown.css'

import { domain } from '@store:constants'
export interface Props {
	frontmatter: {
		title: string
		description: string
		lang: string
		date: string
		cover: string
		timeToRead: number
		url: string
		author: string
		categories: string[]
		tags: string[]
	}
}

let { frontmatter } = Astro.props
const title = frontmatter.title || t('seo.title')
const description = frontmatter.description || t('seo.description')
const image = frontmatter.cover ? frontmatter.cover : `${domain}/assets/images/me.png`
const ogImageAlt = description || t('seo.ogImageAlt')
const categories = frontmatter.categories || Array<string>()
const tags = frontmatter.tags || Array<string>()
const lang = frontmatter.lang || 'en'
---

<BlogTemplate
	title={title}
	description={description}
	image={image}
	ogImageAlt={ogImageAlt}
	lang={lang}
>
	<article class='mx-2 md:mx-8 lg:mx-24 md:px-2'>
		<h1
			class='mt-10 md:mt-0 text-center md:text-justify text-2xl md:text-4xl font-bold leading-tight md:tracking-wider'
		>
			{frontmatter.title}
		</h1>
		<PostHeader article={frontmatter} />
		<div id='markdown-body' class='markdown-body'>
			<slot />
		</div>
		<div class='mb-8 my-8 flex items-start justify-items-start'>
			<a href={localizePath('/blog')} class='font-bold uppercase'>
				<div
					class='flex items-center md:items-start justify-center sm:text-center animate-pulse hover:animate-none'
				>
					<Icon name='ic:round-arrow-back' class='h-7 mr-1 animate-bounce hover:animate-none' />
					<span>{t('back-to-block')}</span>
				</div>
			</a>
		</div>
		<div class='flex flex-col md:flex-row'>
			<!--category-->
			<div class='flex items-center justify-center mb-8 text-sm mx-1'>
				<Icon name='ic:outline-category' class='h-5 mr-2' />
				{
					categories.map((category) => (
						<a href={localizePath(category)} class='inline-link mx-1'>
							{category}
						</a>
					))
				}
			</div>
			<!-- tags -->
			<div class='flex items-center justify-center mb-8 text-sm mx-1'>
				<Icon name='clarity:tags-solid-alerted' class='h-5 mr-2' />
				{
					tags.map((tag) => (
						<a href={localizePath(tag)} class='inline-link mx-1'>
							{tag}
						</a>
					))
				}
			</div>
		</div>
	</article>
</BlogTemplate>

<style is:global>
	#first-paragraph {
		@apply first-letter:text-7xl first-letter:font-bold first-letter:text-white first-letter:mr-3 first-letter:float-left;
	}
</style>

<script is:inline>
	const paragraphs = document.querySelectorAll('p')

	const firstParagraph = Array.from(paragraphs).find((p) => p.textContent.trim().length > 0)

	if (firstParagraph) {
		firstParagraph.id = 'first-paragraph'
	}

	// add target blank to all links that are not internal and not mailto links in the div with id markdown-body
	const isExternalLink = (link) => {
		const href = link.href
		if (window.location.host === link.host) {
			return false
		}
		if (href.startsWith('mailto')) {
			return false
		}
		return true
	}
	const links = document.querySelectorAll('#markdown-body a')
	links.forEach((link) => {
		if (isExternalLink(link)) {
			link.target = '_blank'
			link.classList.add('inline-link')
		}
	})
</script>
