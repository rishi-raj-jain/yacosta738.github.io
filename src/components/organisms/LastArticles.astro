---
import i18next, { t } from 'i18next'
import { Article, jsonToArticle } from '@models:Article'
import { MarkdownInstance } from 'astro'

const articlesFiles: { [key: string]: Promise<MarkdownInstance<Record<string, any>>[]> } = {
	en: Astro.glob('../../pages/blog/**/*.md'),
	es: Astro.glob('../../pages/es/blog/**/*.md')
}
const postsData = i18next.language in articlesFiles ? await articlesFiles[i18next.language] : []
const maxNumberOfPosts = 3
const posts: Article[] = postsData
	.filter((post) => !post.frontmatter.draft && post.frontmatter.lang === i18next.language)
	.map((post) => jsonToArticle(post))
	.sort((a, b) => {
		let aDate = new Date(a.date)
		let bDate = new Date(b.date)
		return bDate.getTime() - aDate.getTime()
	})
	.slice(0, maxNumberOfPosts)
---

<section id='last3articles' class="flex flex-col justify-center items-center content-center">
	<h2 class='numbered-heading'>{t('menus.last-articles')}</h2>
	<div class='my-2 flex flex-col md:flex-row justify-center justify-items-center content-center gap-4'>
		{
			posts.map((post) => (
				<article class='w-full max-w-sm bg-lightest-navy rounded-lg border border-light-navy shadow-md'>
					<a href={post.url}>
						<img class='rounded-t-lg object-cover h-48 w-96' src={post.cover} alt={post.title} />
					</a>
					<div class='p-5'>
						<a href={post.url}>
							<h5 class='mb-2 text-2xl font-bold tracking-tight text-lightest-slate'>
								{post.title}
							</h5>
						</a>
						<p class='mb-3 font-normal line-clamp-4 md:line-clamp-3'>
							{post.description}
						</p>
					</div>
					<footer class="static bottom-1">
							<a
							href={post.url}
							class='inline-flex items-center py-2 px-3 text-sm font-medium'
						>
							{t('read')}
						</a>
							</footer>
				</article>
			))
		}
	</div>
</section>
